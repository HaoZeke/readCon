/*
 * TestConFrame.cc
 *
 *  Created on: 23 July 2024
 *      Author: Rohit Goswami
 *     Company: University of Iceland
 */

#include "../include/ReadCon.hpp"
#include <gtest/gtest.h>

using namespace yodecon::types;

TEST(AtomDatumTest, Constructor) {
  AtomDatum atom("O", 1.0, 2.0, 3.0, false, 1);
  EXPECT_EQ("O", atom.symbol);
  EXPECT_DOUBLE_EQ(1.0, atom.x);
  EXPECT_DOUBLE_EQ(2.0, atom.y);
  EXPECT_DOUBLE_EQ(3.0, atom.z);
  EXPECT_EQ(false, atom.is_fixed);
  EXPECT_EQ(1, atom.atom_id);
}

TEST(ConFrameTest, Constructor) {
  ConFrame conFrame;
  conFrame.prebox_header = {"Generated by eOn", ""};
  conFrame.boxl = {25.0, 25.0, 25.0};
  conFrame.angles = {90.0, 90.0, 90.0};
  conFrame.postbox_header = {"", ""};
  conFrame.natm_types = 4;
  conFrame.natms_per_type = {2, 4, 6, 1};
  conFrame.masses_per_type = {15.99, 12.011, 1.008, 32.065};
  AtomDatum atom("O", 10.477713, 12.379463, 12.871778, false, 1);
  conFrame.atom_data.push_back(atom);

  EXPECT_EQ("Generated by eOn", conFrame.prebox_header[0]);
  EXPECT_DOUBLE_EQ(25.0, conFrame.boxl[0]);
  EXPECT_DOUBLE_EQ(90.0, conFrame.angles[0]);
  EXPECT_EQ(4, conFrame.natm_types);
  EXPECT_EQ(2, conFrame.natms_per_type[0]);
  EXPECT_DOUBLE_EQ(15.99, conFrame.masses_per_type[0]);
  EXPECT_EQ("O", conFrame.atom_data[0].symbol);
}

TEST(ConFrameTest, AtomicSymbolsRoundTrip) {
  // Create a ConFrame with multiple AtomDatum objects.
  ConFrame conFrame;
  conFrame.atom_data.push_back(AtomDatum("H", 1.0, 2.0, 3.0, false, 1));
  conFrame.atom_data.push_back(AtomDatum("C", 4.0, 5.0, 6.0, false, 2));
  conFrame.atom_data.push_back(AtomDatum("O", 7.0, 8.0, 9.0, false, 3));

  // Extract atomic symbols from ConFrame.
  std::vector<std::string> atomicSymbols;
  for (const auto &atom : conFrame.atom_data) {
    atomicSymbols.push_back(atom.symbol);
  }

  // Convert atomic symbols to numbers.
  std::vector<size_t> atomicNumbers =
      yodecon::symbols_to_atomic_numbers(atomicSymbols);

  // Check that the conversion was correct.
  ASSERT_EQ(atomicNumbers.size(), 3);
  EXPECT_EQ(atomicNumbers[0], 1); // H
  EXPECT_EQ(atomicNumbers[1], 6); // C
  EXPECT_EQ(atomicNumbers[2], 8); // O

  // Convert atomic numbers back to symbols.
  std::vector<std::string> roundTripSymbols =
      yodecon::atomic_numbers_to_symbols(atomicNumbers);

  // Check that the conversion back to symbols was correct.
  ASSERT_EQ(roundTripSymbols.size(), 3);
  EXPECT_EQ(roundTripSymbols[0], "H");
  EXPECT_EQ(roundTripSymbols[1], "C");
  EXPECT_EQ(roundTripSymbols[2], "O");
}

int main(int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
